description: >
  This command builds an Unity project.

parameters:
  step-name:
    type: string
    default: Build the project
    description: |
      Specify a custom step name for this command, if desired.
  project-path:
    type: string
    default: "."
    description: |
      Enter the relative path of your Unity project.
      This should be the directory that has an "Assets" folder inside it.
  build-target:
    type: string
    description: |
      The target platform of your build.
      Accepted arguments vary with Unity's version and can be found in the docs: https://docs.unity3d.com/2021.2/Documentation/ScriptReference/BuildTarget.html
  build-name:
    type: string
    default: ""
    description: |
      Enter the name for this build.
      If left blank, the build will be named after the target platform.
  store-artifacts:
    type: boolean
    default: true
    description: |
      Whether to store the build output.
      If left to "false" you won't be able to download the build from the job's artifacts.
  compress:
    type: boolean
    default: true
    description: |
      Whether to compress the build output to a ".tar.gz" archive.
      This is recommended if you want to download the built artifacts from the CircleCI web app.
      If left to "false" for decompressed WebGL builds, you can run the project directly from the CircleCI web app.
  no_output_timeout:
    type: string
    default: "10m"
    description: Elapsed time the command can run without output.
  build-method:
    type: string
    default: ""
    description: |
      The method used as argument for the Unity CLI "executeMethod" parameter.
      It must be a valid path to a static method and the class exist in the Assets/Editor directory.
      If left empty, the default build method will be used.
  custom-parameters:
    type: string
    default: ""
    description: |
      Additional arguments for the Unity CLI.
      Use it to pass arguments defined on your custom "build-method" or Unity's build options. Environment variables are supported.
      The parameters must be separated by space and must be in the format "-key value" or "-key" for booleans.
      Example: "-customArg1 WebGL -EnableHeadlessMode -customArg2 $CIRCLE_WORKFLOW_ID".

steps:
  - run:
      name: << parameters.step-name >>
      no_output_timeout: << parameters.no_output_timeout >>
      environment:
        PARAM_BUILD_NAME: << parameters.build-name >>
        PARAM_BUILD_TARGET: << parameters.build-target >>
        PARAM_PROJECT_PATH: << parameters.project-path >>
        PARAM_COMPRESS: << parameters.compress >>
        PARAM_BUILD_METHOD: << parameters.build-method >>
        PARAM_CUSTOM_PARAMETERS: << parameters.custom-parameters >>
        SCRIPT_BUILD_WINDOWS: << include(scripts/windows/build.sh) >>
        SCRIPT_BUILD_LINUX: << include(scripts/linux/build.sh) >>
        SCRIPT_BUILD_MACOS: << include(scripts/macos/build.sh) >>
        SCRIPT_UTILS: << include(scripts/utils.sh) >>
        DEPENDENCY_UNITY_BUILDER: << include(dependencies/unity-builder/BuildCommand.cs) >>
      command: << include(scripts/build.sh) >>
  - when:
      condition:
        and:
          - << parameters.store-artifacts >>
          - << parameters.compress >>
      steps:
        - store_artifacts:
            path: << parameters.build-target >>.tar.gz

  - when:
      condition:
        and:
          - << parameters.store-artifacts >>
          - not: << parameters.compress >>
      steps:
        - store_artifacts:
            path: << parameters.project-path >>/Builds/<< parameters.build-target >>
